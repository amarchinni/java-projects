Setting Up the Environment:

Use Node.js with Express for the backend server.
Use Sequelize as the ORM to interact with the database.
API Endpoints:

Fetch Dishes:

http
Copy code
GET /api/dishes
Retrieves a list of all dishes.
Toggle isPublished:

http
Copy code
PUT /api/dishes/:id/toggle
Toggles the isPublished status of a dish by its dishId.
Example Code:

const express = require('express');
const { Sequelize, DataTypes } = require('sequelize');

const sequelize = new Sequelize('database', 'username', 'password', {
  host: 'localhost',
  dialect: 'postgres',
});

const Dish = sequelize.define('Dish', {
  dishId: {
    type: DataTypes.INTEGER,
    autoIncrement: true,
    primaryKey: true,
  },
  dishName: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  imageUrl: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  isPublished: {
    type: DataTypes.BOOLEAN,
    defaultValue: true,
  },
});

const app = express();
app.use(express.json());

app.get('/api/dishes', async (req, res) => {
  const dishes = await Dish.findAll();
  res.json(dishes);
});

app.put('/api/dishes/:id/toggle', async (req, res) => {
  const dish = await Dish.findByPk(req.params.id);
  if (dish) {
    dish.isPublished = !dish.isPublished;
    await dish.save();
    res.json(dish);
  } else {
    res.status(404).send('Dish not found');
  }
});

sequelize.sync().then(() => {
  app.listen(3000, () => {
    console.log('Server is running on port 3000');
  });
});
